const MFS = require('memory-fs');
const CHOKIDAR = require('chokidar')
const WEBPACK = require('webpack');
const PATH = require('path');
const FS = require('fs');

const CLIENT_CONFIG = require('./webpack.client.config');
const SERVER_CONFIG = require('./webpack.server.config');

const READ_FILE = (fs, file) => {
    try {
        return fs.readFileSync(PATH.join(CLIENT_CONFIG.output.path, file), 'utf-8');
    } catch (e) { }
};

module.exports = function startupDev(app, templatePath, callback) {
    let bundle,
        template,
        clientManifest;
    let ready;
    const READY_PROMISE = new Promise(resolve => { ready = resolve });
    const UPDATE = () => {
        if (bundle && clientManifest) {
            ready();
            callback(bundle, {
                template,
                clientManifest
            });
        }
    };

    // read template from disk and watch
    template = FS.readFileSync(templatePath, 'utf-8');
    CHOKIDAR.watch(templatePath).on('change', () => {
        template = FS.readFileSync(templatePath, 'utf-8');
        console.log('index.html template updated.');
        update();
    });

    // modify client config to work with hot middleware
    CLIENT_CONFIG.entry.app = ['webpack-hot-middleware/client?reload=true', CLIENT_CONFIG.entry.app];
    CLIENT_CONFIG.output.filename = '[name].js';
    CLIENT_CONFIG.plugins.push(
        new WEBPACK.HotModuleReplacementPlugin(),
        new WEBPACK.NoEmitOnErrorsPlugin()
    );

    // dev middleware
    const CLIENT_COMPILER = WEBPACK(CLIENT_CONFIG);
    const DEV_MIDDLEWARE = require('webpack-dev-middleware')(CLIENT_COMPILER, {
        publicPath: CLIENT_CONFIG.output.publicPath,
        noInfo: true
    });
    app.use(DEV_MIDDLEWARE);
    CLIENT_COMPILER.plugin('done', stats => {
        stats = stats.toJson();
        stats.errors.forEach(err => console.error(err));
        stats.warnings.forEach(err => console.warn(err));
        if (stats.errors.length) return;
        clientManifest = JSON.parse(READ_FILE(
            DEV_MIDDLEWARE.fileSystem,
            'vue-ssr-client-manifest.json'
        ));
        UPDATE();
    });

    // hot middleware
    app.use(require('webpack-hot-middleware')(CLIENT_COMPILER));

    // watch and update server renderer
    const SERVER_COMPILER = WEBPACK(SERVER_CONFIG);
    let mfs = new MFS();
    SERVER_COMPILER.outputFileSystem = mfs;
    SERVER_COMPILER.watch({}, (err, stats) => {
        if (err) throw err;
        stats = stats.toJson();
        if (stats.errors.length) return;

        // read bundle generated by vue-ssr-webpack-plugin
        bundle = JSON.parse(READ_FILE(mfs, 'vue-ssr-server-bundle.json'));
        UPDATE();
    });

    return READY_PROMISE;
}